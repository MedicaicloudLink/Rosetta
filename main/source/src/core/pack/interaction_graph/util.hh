// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington CoMotion, email: license@uw.edu.

/// @file   core/pack/interaction_graph/util.hh
/// @brief  Simple utilities for interaction graphs.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org)

#ifndef INCLUDED_core_pack_interaction_graph_util_hh
#define INCLUDED_core_pack_interaction_graph_util_hh

// Package Headers

// Project Headers
#include <core/pose/Pose.fwd.hh>
#include <core/pack/interaction_graph/AnnealableGraphBase.fwd.hh>
#include <core/pack/rotamer_set/RotamerSets.fwd.hh>
#include <core/conformation/Residue.fwd.hh>
#include <core/types.hh>

// Utility Headers
#include <utility/vector1.fwd.hh>

// STL headers:
#include <sstream>


namespace core {
namespace pack {
namespace interaction_graph {


/// @brief Given an interaction graph, get a summary describing it fully.
/// @details This is intended to be a machine-readable summary that facilitates a Rosetta interface to
/// external annealers or optimizers.
/// @param[out] igstream The output stream for the summary.
/// @param[in] pose The pose, for reference.
/// @param[in] rot_sets The RotamerSets object containing the set of sets of rotamers for each position.
/// @param[in] anngraph The pre-computed interaction graph.
/// @param[in] short_version  If true, only the interaction graph summary is returned.  If false, information needed to reconstruct the pose
/// is also included.  False by default.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org)
void get_annealable_graph_summary( std::stringstream & igstream, core::pose::Pose const & pose, core::pack::rotamer_set::RotamerSets const & rot_sets, AnnealableGraphBaseCOP const & anngraph, bool const short_version=false );

/// @brief Given a description of a packer problem, a description of the solution, and a pose to put a result in, generate
/// a pose representing the solution.
/// @details The contents of the pose are destroyed by this operation, and replaced by the pose described in the packer problem
/// and the rotamers described in the solutions!
/// @param[out] pose The pose, cleared and rebuilt by this operation.
/// @param[in] packer_problem_description A description of the packer problem, including blocks for the original pose, the rotamers,
/// and the energies, as generated by get_annealable_graph_summary().
/// @param[out] packer_solution_description A solution to the packer problem, in the format of a series of lines, one for each packable position,
/// consisting of <seqpos #> <rotamer #>.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org)
void set_externally_generated_packer_solution( core::pose::Pose & pose, std::string const &packer_problem_description, std::string const &packer_solution_description );

/// @brief Given the description of a packer problem as generated by get_annealable_graph_summary(), pull out
/// and re-generate the pose.
/// @details The contents of the pose are destroyed and replaced by the pose from the description in this operation.
void generate_pose_from_packer_description( core::pose::Pose & pose, std::string const & packer_problem_description );

/// @brief Given a packer problem and its solution, generate rotamers from it.
/// @details The rotamer vector (a vector of pairs of <seqpos, residueCOP>) is cleared and populated by this operation.
void
generate_rotamers_from_packer_solution_description( utility::vector1< std::pair< core::Size, core::conformation::ResidueCOP > > & rotamers, std::string const & packer_problem_description, std::string const & packer_solution_description );

/// @brief Given a vector of solution rotamers and a pose, put the rotamers on the pose.
/// @details The vector is a vector of pairs of the form <seqpos, rotamerCOP>.
void
add_rotamers_to_pose( core::pose::Pose & pose, utility::vector1< std::pair< core::Size, core::conformation::ResidueCOP > > & rotamers );

} // namespace interaction_graph
} // namespace pack
} // namespace core

#endif
