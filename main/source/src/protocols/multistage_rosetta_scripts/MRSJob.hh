// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington CoMotion, email: license@uw.edu.

/// @file protocols/multistage_rosetta_scripts/MRSJob.hh
/// @brief JD3 job class to be used by Multistage Rosetta Scripts (MRS)
/// @detailed
/// @author Jack Maguire, jackmaguire1444@gmail.com


#ifndef INCLUDED_protocols_multistage_rosetta_scripts_MRSJob_HH
#define INCLUDED_protocols_multistage_rosetta_scripts_MRSJob_HH

#include <utility/pointer/ReferenceCount.hh>
#include <protocols/multistage_rosetta_scripts/MRSJob.fwd.hh>
#include <protocols/multistage_rosetta_scripts/TagManager.hh>
#include <protocols/multistage_rosetta_scripts/cluster/ClusterMetric.fwd.hh>

#include <protocols/jd3/CompletedJobOutput.hh>
#include <protocols/jd3/Job.hh>
#include <protocols/jd3/JobResult.fwd.hh>
#include <protocols/jd3/JobSummary.fwd.hh>
#include <protocols/jd3/LarvalJob.fwd.hh>

#include <core/pose/Pose.fwd.hh>

#include <basic/datacache/DataMap.hh>

#include <utility/tag/Tag.fwd.hh>
#include <utility/vector1.hh>

#include <protocols/rosetta_scripts/util.hh>
#include <protocols/filters/Filter.fwd.hh>
#include <protocols/moves/Mover.fwd.hh>

#include <boost/container/flat_map.hpp>

namespace protocols {
namespace multistage_rosetta_scripts {

struct mover_or_filter{
	mover_or_filter( moves::MoverOP in_mover ) :
		is_mover ( true ),
		mover ( in_mover ),
		filter ( 0 )
	{}

	mover_or_filter( filters::FilterOP in_filter ) :
		is_mover ( false ),
		mover ( 0 ),
		filter ( in_filter )
	{}

	mover_or_filter( mover_or_filter const & src ) :
		is_mover ( src.is_mover ),
		mover ( src.mover ),
		filter ( src.filter )
	{}

	mover_or_filter & operator=( mover_or_filter const & src ) {
		is_mover = src.is_mover;
		mover = src.mover;
		filter = src.filter;
		return *this;
	}

	~mover_or_filter(){}

	mover_or_filter deep_clone(){
		if ( is_mover ) {
			mover_or_filter clone( mover->clone() );
			return clone;
		} else {
			mover_or_filter clone( filter->clone() );
			return clone;
		}
	}

	bool is_mover;
	moves::MoverOP mover;
	filters::FilterOP filter;

	///@brief DUMMY FOR PYROSETTA
	mover_or_filter() :
		is_mover( false ),
		mover( 0 ),
		filter( 0 )
	{
#ifndef PYROSETTA
		utility_exit_with_message( "Bad Ctor Called" );
#endif
	}
};

class MRSJob: public jd3::Job {

public:

	//constructor
	MRSJob(
		core::Size max_num_results = 1
	);

	//destructor
	~MRSJob();

public:

	void set_pose( core::pose::PoseOP pose ) {
		pose_ = pose;
	}

	inline core::pose::PoseCOP pose() const {
		return pose_;
	}

	jd3::CompletedJobOutput run() override;

	void parse_my_tag(
		utility::tag::TagCOP tag,
		basic::datacache::DataMap &,
		filters::Filters_map const &,
		moves::Movers_map const &,
		core::pose::Pose const &,
		std::map< std::string, utility::tag::TagCOP > const & mover_tags_by_name,
		std::map< std::string, utility::tag::TagCOP > const & filter_tags_by_name );

	inline void parse_my_tag(
		utility::tag::TagCOP tag,
		core::pose::Pose const & pose,
		ParsedTagCacheOP cache
	){
		parse_my_tag(
			tag,
			* cache->data_map,
			* cache->filters_map,
			* cache->movers_map,
			pose,
			* cache->mover_tags,
			* cache->filter_tags
		);
		data_ = std::move( cache  );
	};

	///@brief returns metric generated by the final filter of the protocol
	core::Real metric_for_evaluation( core::pose::PoseOP pose ) const;

public://getters and setters

	///@brief the final mover of the protocol is allowed to return additional output poses. This value places a cap on the number of poses that can be output by that mover
	inline void set_max_num_results( core::Size setting ){
		max_num_results_ = setting;
	}

	inline core::Size max_num_results() const {
		return max_num_results_;
	}

	///@brief this getter is only really intended to be used for unit tests
	inline std::list< mover_or_filter > & protocols() {
		return protocols_;
	}

	void
	set_cluster_metric_tag(
		utility::tag::TagCOP tag_for_cluster_metric
	) {
		tag_for_cluster_metric_ = std::move( tag_for_cluster_metric );
	}

protected:
	cluster::ClusterMetricOP get_cluster_metric( core::pose::Pose const & pose );


private:
	jd3::CompletedJobOutput run_inner();

	core::pose::PoseOP pose_;
	std::list< mover_or_filter > protocols_;
	core::Size max_num_results_;

	bool positive_scores_are_better_;
	//cluster::ClusterMetricOP cluster_metric_;

	utility::tag::TagCOP tag_for_cluster_metric_;
	ParsedTagCacheOP data_;
};

} //multistage_rosetta_scripts
} //protocols

#endif
