# Binder config for Rosetta
+default_static_pointer_return_value_policy           pybind11::return_value_policy::reference
+default_static_lvalue_reference_return_value_policy  pybind11::return_value_policy::reference
+default_static_rvalue_reference_return_value_policy  pybind11::return_value_policy::move

+default_member_pointer_return_value_policy           pybind11::return_value_policy::reference
+default_member_lvalue_reference_return_value_policy  pybind11::return_value_policy::reference_internal
+default_member_rvalue_reference_return_value_policy  pybind11::return_value_policy::move

-namespace nlohmann
-namespace ndarray
-namespace boost
-namespace Eigen
+namespace ObjexxFCL
+namespace utility
+namespace numeric
+namespace basic
+namespace core
+namespace protocols
-namespace msgpack
-namespace mmtf

#+namespace cereal

#-namespace utility::keys
#-namespace utility::pointer
-class utility::pointer::ReferenceCount
-class std::__weak_ptr

#-namespace utility::options
#-namespace basic::options
-namespace protocols::boinc


-include <boost/format/internals.hpp>
-include <boost/format/group.hpp>
-include <boost/graph/detail/adjacency_list.hpp>
-include <boost/function/function_template.hpp>


+include <python/PyRosetta/binder/source/stl_binders.hpp>
+include <python/PyRosetta/include/rosetta_binders.hpp>

+include_for_class numeric::alignment::rmsd_calc <numeric/alignment/rmsd_calc.py.hh>
+binder numeric::alignment::rmsd_calc numeric::alignment::bind_rmsd_calc<pybind11::module>

+include_for_class protocols::indexed_structure_store::StructureStore <protocols/indexed_structure_store/StructureStore.py.hh>
+binder protocols::indexed_structure_store::StructureStore protocols::indexed_structure_store::bind_StructureStore<pybind11::module>

# By-hand bindings defined to support numpy array interface for structure data.
+include_for_class protocols::indexed_structure_store::search::StructureDatabase <protocols/indexed_structure_store/search/QueryDatabase.py.hh>
+binder protocols::indexed_structure_store::search::StructureDatabase protocols::indexed_structure_store::search::bind_QueryDatabase<pybind11::module>
-class protocols::indexed_structure_store::search::StructureData
-class protocols::indexed_structure_store::search::StructurePairQuery
-class protocols::indexed_structure_store::search::StructureSingleQuery
-class protocols::indexed_structure_store::search::StructurePairQueryResult
-class protocols::indexed_structure_store::search::StructureSingleQueryResult
-class protocols::indexed_structure_store::search::PairQuerySummaryStatistics
-class protocols::indexed_structure_store::search::SingleQuerySummaryStatistics
-class protocols::indexed_structure_store::search::PairQueryExecutor
-class protocols::indexed_structure_store::search::SingleQueryExecutor

-function protocols::indexed_structure_store::extract_residue_entry
-function protocols::indexed_structure_store::extract_residue_entries
-function protocols::indexed_structure_store::apply_residue_entries_to_pose
-function protocols::indexed_structure_store::residue_entries_to_pose
-function protocols::indexed_structure_store::initial_pose_for_residues
+include_for_class protocols::indexed_structure_store::PoseUtilityPlaceholder <protocols/indexed_structure_store/pose_utility.py.hh>
+binder protocols::indexed_structure_store::PoseUtilityPlaceholder protocols::indexed_structure_store::bind_pose_utility<pybind11::module>

+binder std::vector binder::vector_binder
+binder std::map    binder::map_binder

# default generate bindings for std::multimap is not useful, disabling them for now until we have custom binder
#-class std::multimap

# disabling bindgins for deque until we have dedicated binder function
-class std::deque

#binder utility::vectorL rosetta_binders::vectorL_binder
+binder utility::vector0 rosetta_binders::vector0_binder
+binder utility::vector1 rosetta_binders::vector1_binder

-class utility::vectorL

+add_on_binder numeric::xyzVector rosetta_binders::xyzVector_add_on_binder
-function numeric::xyzVector::operator[]

+add_on_binder numeric::xyzMatrix rosetta_binders::xyzMatrix_add_on_binder

+add_on_binder std::basic_ostringstream rosetta_binders::stringstream_add_on_binder
+add_on_binder std::basic_istringstream rosetta_binders::stringstream_add_on_binder
+add_on_binder std::basic_stringstream  rosetta_binders::stringstream_add_on_binder

+add_on_binder std::set rosetta_binders::set_add_on_binder
+add_on_binder std::list rosetta_binders::list_add_on_binder

# CifParse, objects not in namespace and relative include path is used (ie #include "...")
-class Serializer
-class ISTable
-class Block


# template operator() creation for wrong numbers of arguments (depends on second template parameter).
-class fem::arr_ref
-class fem::arr_cref

# Mac specifics
-class std::__bit_reference
-class std::__bit_const_reference

# Missing members on Linux+Clang
-function std::_Bit_iterator::_M_const_cast
-function std::_Bit_const_iterator::_M_const_cast

# Mac specifics: ld: illegal text reloc in '__Z16bind_std_sstreamRNSt3__18functionIFRN8pybind116moduleERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE' to '__ZNSt3__19basic_iosIcNS_11char_traitsIcEEE5imbueERKNS_6localeE' for architecture x86_64
# -function std::basic_ios::widen
# -function std::basic_ios::narrow
# -function std::basic_ios::imbue
# -function std::basic_ios::fill
# -function std::basic_ios::rdbuf
# -function std::basic_ios::tie
-class std::basic_ios
#-class std::basic_istream
#-class std::basic_ostream
-function std::basic_istream::gcount


# ObjexxFCL

# Dimension copy constructor define as explicit and instead create a reference to orginal object so operator returning copy of the object could not be binded
-function ObjexxFCL::Dimension::operator++
-function ObjexxFCL::Dimension::operator--

# no '*' and '/' operators for template types defined
-function ObjexxFCL::FArray<std::string>::operator*=
-function ObjexxFCL::FArray<std::string>::operator/=
-function ObjexxFCL::FArray<utility::vector1<double, std::allocator<double> > >::operator*=
-function ObjexxFCL::FArray<utility::vector1<double, std::allocator<double> > >::operator/=
-function ObjexxFCL::FArray<std::vector<unsigned long, std::allocator<unsigned long> > >::operator*=
-function ObjexxFCL::FArray<std::vector<unsigned long, std::allocator<unsigned long> > >::operator/=
-function ObjexxFCL::FArray<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator*=
-function ObjexxFCL::FArray<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator/=
-function ObjexxFCL::FArray<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator*=
-function ObjexxFCL::FArray<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator/=
-function ObjexxFCL::FArray2<std::string>::operator*=
-function ObjexxFCL::FArray2<std::string>::operator/=
-function ObjexxFCL::FArray3<utility::vector1<double, std::allocator<double> > >::operator*=
-function ObjexxFCL::FArray3<utility::vector1<double, std::allocator<double> > >::operator/=
-function ObjexxFCL::FArray3<std::vector<unsigned long, std::allocator<unsigned long> > >::operator*=
-function ObjexxFCL::FArray3<std::vector<unsigned long, std::allocator<unsigned long> > >::operator/=
-function ObjexxFCL::FArray3<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator*=
-function ObjexxFCL::FArray3<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator/=
-function ObjexxFCL::FArray3<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator*=
-function ObjexxFCL::FArray3<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator/=
-function ObjexxFCL::FArray2D<std::string >::operator*=
-function ObjexxFCL::FArray2D<std::string >::operator/=
-function ObjexxFCL::FArray3D<utility::vector1<double, std::allocator<double> > >::operator*=
-function ObjexxFCL::FArray3D<utility::vector1<double, std::allocator<double> > >::operator/=
-function ObjexxFCL::FArray3D<std::vector<unsigned long, std::allocator<unsigned long> > >::operator*=
-function ObjexxFCL::FArray3D<std::vector<unsigned long, std::allocator<unsigned long> > >::operator/=
-function ObjexxFCL::FArray3D<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator*=
-function ObjexxFCL::FArray3D<utility::vector1<unsigned int, std::allocator<unsigned int> > >::operator/=
-function ObjexxFCL::FArray3D<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator*=
-function ObjexxFCL::FArray3D<utility::vector1<numeric::xyzVector<double>, std::allocator<numeric::xyzVector<double> > > >::operator/=

# no int to T conversion defined, could not instantiate template
-function ObjexxFCL::FArray2<std::string>::is_identity
-function ObjexxFCL::FArray2<std::string>::to_identity
-function ObjexxFCL::FArray2D<std::string>::identity

# no corresponding operator is defined...
-function ObjexxFCL::FArray<std::string>::operator-=
-function ObjexxFCL::FArray2<std::string>::operator-=
-function ObjexxFCL::FArray2D<std::string>::operator-=
-function utility::fixedsizearray1iterator<unsigned long, 4>::operator+=
-function utility::fixedsizearray1iterator<unsigned long, 4>::operator-=
-function utility::fixedsizearray1iterator<unsigned long, 5>::operator+=
-function utility::fixedsizearray1iterator<unsigned long, 5>::operator-=
-function utility::fixedsizearray1iterator<double, 4>::operator+=
-function utility::fixedsizearray1iterator<double, 4>::operator-=
-function utility::fixedsizearray1iterator<double, 5>::operator+=
-function utility::fixedsizearray1iterator<double, 5>::operator-=

-function basic::Tracer::create_impl
-function basic::MemTracer::create_impl

# problem with bool specialization? error: address of overloaded function 'swap' does not match required type 'void (core::id::DOF_ID_Map<bool> &, core::id::DOF_ID_Map<bool> &)'
-function core::id::swap

-class std::_Rb_tree_iterator
#-function std::map::insert
#-function std::multimap::insert

-function std::list::unique
-function std::list::merge
-function std::list::sort
-function std::list::remove
# functions take interator references, no valid access pattern
-function std::list::splice
-function std::list::insert
-function std::list::erase




# bag of pointers?
-class std::list<const protocols::match::Hit *,std::allocator<const protocols::match::Hit *>>

-class std::list<std::pair<double, core::pose::rna::BaseStack>,std::allocator<std::pair<double, core::pose::rna::BaseStack> >>

-class std::list<utility::keys::VariantKey<utility::options::OptionKey>,std::allocator<utility::keys::VariantKey<utility::options::OptionKey> >>

# temp, until Pybind11 upstream fix this
# -function cereal::OutputArchive::registerSharedPointer
# -function cereal::InputArchive::getSharedPointer
# -function cereal::InputArchive::registerSharedPointer

# problem with SFINAE template argument
-function cereal::XMLInputArchive::loadValue
-function cereal::JSONInputArchive::loadValue


# workaround for Linux+LLVM-4.0 issues
# -class std::allocator
# -class utility::keys::Key
# -class utility::options::Option
# -class utility::options::VectorOption
# -class utility::options::ScalarOption
# -class utility::options::ScalarOption_T_
# -class utility::options::VectorOption_T_

# Pybind11-2.2 migration
-function std::list<double, std::allocator<double> >::list(unsigned long)
-function std::list<double, std::allocator<double> >::list(unsigned long, const double &)

# nlohmann::json library does not cooperate with PyRosetta; workaround:
-class nlohmann::basic_json

# Pybind 2.2.2+ regression, see https://github.com/pybind/pybind11/issues/1283
-class W128_T

# absent nested base class (templated)
-class numeric::geometry::hashing::xyzStripeHash::iter_base
